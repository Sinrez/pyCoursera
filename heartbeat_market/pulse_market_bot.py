import config1
import telebot
import market_pulse as mp
from telebot import types
import cb_usd as cb
import logging

# –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
py_logger = logging.getLogger(__name__)
py_logger.setLevel(logging.INFO)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞
py_handler = logging.FileHandler(f"{__name__}.log", mode='a')
# –µ—Å–ª–∏ –¥–æ–∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–∞–Ω—Å–æ–≤ –Ω–µ –Ω—É–∂–Ω–∞ - —Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å w
py_formatter = logging.Formatter("%(name)s %(asctime)s %(levelname)s %(message)s")

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
py_handler.setFormatter(py_formatter)
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –ª–æ–≥–≥–µ—Ä—É
py_logger.addHandler(py_handler)
py_logger.info(f"Testing the custom logger for module {__name__}...")

bot = telebot.TeleBot(config1.TOKEN)

msg = ',–ø—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç-–∏–∑–º–µ—Ä–∏—Ç–µ–ª—å —Å–ø—Ä–µ–¥–∞: —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–∂–µ–π –∏ ' \
      '–ø–æ–∫—É–ø–∫–æ–π üí∞USDüí∞, –∫—É—Ä—Å—ã –±–µ—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ê–ª—å—Ñ–∞-–±–∞–Ω–∫–∞. –¢–æ–ø–∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å" –∏–ª–∏ –≤–≤–æ–¥–∏: ' \
      '1 —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ—Ç –ê–ª—å—Ñ—ã $, 2 - —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Å–ø—Ä–µ–¥–∞ üöÄ 3 - —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –æ—Ç –¶–ë –†–§'

@bot.message_handler(commands=['start'])  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
def start(message):
    user_first_name = str(message.chat.first_name)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn0 = types.KeyboardButton("–ù–∞—á–∞—Ç—å")
    markup.add(btn0)
    bot.send_message(message.from_user.id, user_first_name + ' ' + msg, reply_markup=markup)

@bot.message_handler(content_types=['text'])
def messages(message):
    try:
        # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–µ–¥–∞
        print(f"Message from {str(message.chat.first_name)} {str(message.chat.last_name)} (id: {str(message.from_user.id)})")
        # –ª–æ–≥–∏—Ä–æ–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        py_logger.info(f"Message from {str(message.chat.first_name)} {str(message.chat.last_name)} (id: {str(message.from_user.id)})")
        print(f"Text: {str(message.text)}")
        py_logger.info(f"Text: {str(message.text)}")
        if message.text == '–ù–∞—á–∞—Ç—å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            btn1 = types.KeyboardButton(text='–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å üí∞')
            btn2 = types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–µ–¥ üí∞')
            btn3 = types.KeyboardButton(text='–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –æ—Ç –¶–ë –†–§ üí∞')
            markup.add(btn1, btn2, btn3)
            bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª', reply_markup=markup) # –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!
        elif message.text == '–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å üí∞' or message.text == '1':
            # bot.send_message(message.chat.id, ''.join(map(str, mp.return_last_entries())))
            bot.send_message(message.chat.id, mp.return_last_entries())
        elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–µ–¥ üí∞' or message.text == '2':
            mp.return_graph()
            bot.send_photo(message.chat.id, open('sprd.png', 'rb'))
        elif message.text == '–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –æ—Ç –¶–ë –†–§ üí∞' or message.text == '3':
            bot.send_message(message.chat.id, cb.return_cb_usd())
        else:
            bot.send_message(message.chat.id, '–¢–∞–∫–∏–µ –º–æ–¥–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã! üí®')
    except Exception as ex:
        py_logger.error("Exception", exc_info=True)
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞! {ex}')

# –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.polling(none_stop=True, interval=0)  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å
# –¶–∏–∫–ª

if __name__ == '__main__':
    py_logger.info('–†–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    print('–†–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')